generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  name        String     @unique
  password    String
  phone       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  address     String
  isPublisher Boolean    @default(false)
  Book        Book[]
  Favorite    Favorite[]
}

enum Genre {
  Literary_Fiction
  Contemporary_Romance
  Crime_Thriller
  Science_Fiction
  Biography_or_Memoir
  History_or_Geography
  Young_Adult_Fiction
  Childrens_Books
  Fantasy
  Horror
  Science_or_Technology
  Self_Help_or_Psychology
  Humour
  Food_or_Cookery
  Art_or_Photography
  Sports_or_Leisure
  Travel
  Religion_or_Spirituality
  Politics_or_Current_Affairs
  Popular_Science
  Business_or_Economics
  Health_or_Wellbeing
  Parenting_or_Family
  Education_or_Reference
  Poetry_or_Plays
  Comics_or_Graphic_Novels
  Music_or_Film
  Romance
}

model Book {
  id          String     @id @default(uuid())
  title       String
  price       String
  description String
  image       String?
  genre       Genre
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  language    String?
  length      String?
  releasedAt  String?
  publisherId String
  publisher   User       @relation(fields: [publisherId], references: [id])
  Author      Author     @relation(fields: [authorId], references: [id])
  authorId    String
  isFavorite  Boolean @default(false)
  Favorite    Favorite[]
}

model Author {
  id          String @id @default(uuid())
  name        String
  bio         String
  dob         String
  address     String
  description String
  Book        Book[]
}

model Favorite {
  id     String @id @default(uuid())
  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id])
  book   Book   @relation(fields: [bookId], references: [id])
}
